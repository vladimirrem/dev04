<?php

/**
 * @file
 * Use field label as placeholder for all elements in chosen form.
 */

/**
 * Implements hook_element_info_alter().
 */
function form_placeholder_element_info_alter(array &$types) {
  foreach (array_keys($types) as $type) {
    switch ($type) {
      case 'form':
      case 'textarea':
      case 'textfield':
      case 'tel':
      case 'url':
      case 'password':
      case 'password_confirm':
        $types[$type]['#process'][] = 'form_placeholder_process_element';
        break;
    }
  }
}

/**
 * Element process callback.
 *
 * @param array $element
 *   The render array element.
 *
 * @return array
 *   The processed element.
 */
function form_placeholder_process_element($element, &$form_state) {
  if (isset($element['#form_placeholder'])) {
    $action = $element['#form_placeholder'] == TRUE ? 'include' : 'exclude';
    if ($element['#type'] == 'form') {
      $element['#attributes']['class'][] = 'form-placeholder-' . $action . '-children';
    }
    else {
      $element['#attributes']['class'][] = 'form-placeholder-' . $action;
    }
  }
  form_placeholder_attach($element);

  return $element;
}

/**
 * Adds placeholder to form element.
 *
 * @param array $element
 *   Form API element.
 */
function form_placeholder_attach(&$element) {
  $config = \Drupal::config('form_placeholder.settings');

  // Adding settings.
  $whitechars = array("\r\n", "\r", "\n");
  $element['#attached']['drupalSettings']['form_placeholder'] = [
    'include' => str_replace($whitechars, ',', $config->get('included_selectors')),
    'exclude' => str_replace($whitechars, ',', $config->get('excluded_selectors')),
    'required_indicator' => $config->get('required_indicator'),
  ];

  // Adding module JS file.
  $element['#attached']['library'][] = 'form_placeholder/form_placeholder';
}
