<?php

/**
 * @file
 * Provides a Slick Entity Browser integration.
 */

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\blazy\Blazy;
use Drupal\slick_browser\SlickBrowser;
use Drupal\slick_browser\SlickBrowserDefault;

/**
 * Implements hook_theme().
 */
function slick_browser_theme() {
  $base = [
    'render element' => 'element',
    'file' => 'templates/slick_browser.theme.inc',
  ];

  $themes['slick_browser'] = $base;

  // Provides own markups, avoids conflict of interests against front-end slick.
  foreach (['slick', 'grid', 'vanilla'] as $item) {
    $key = $item == 'slick' ? $item : 'slick_' . $item;
    $themes[$key . '__browser'] = $base + ['base hook' => $key];
  }

  return $themes;
}

/**
 * Implements hook_preprocess_views_view().
 */
function slick_browser_preprocess_views_view(&$variables) {
  if ($plugin_id = $variables['view']->getStyle()->getPluginId()) {
    if ($plugin_id == 'slick_browser') {
      $variables['attributes']['class'][] = 'sb view--sb';

      // Adds class based on entity type ID for further styling.
      if ($entity_type = $variables['view']->getBaseEntityType()->id()) {
        $variables['attributes']['class'][] = 'view--' . str_replace('_', '-', $entity_type);
      }

      // Adds class based on pager to position it either fixed, or relative.
      if ($pager_id = $variables['view']->getPager()->getPluginId()) {
        $variables['attributes']['class'][] = 'view--pager-' . str_replace('_', '-', $pager_id);
      }
    }
  }

  // Adds the active grid/ list (table-like) class regardless style plugin.
  if (isset($variables['view']->exposed_widgets['#sb_settings'])) {
    $variables['attributes']['class'][] = 'view--sb-' . $variables['view']->exposed_widgets['#sb_settings']['active'];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function slick_browser_form_views_ui_add_handler_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $view = $form_state->get('view');

  // Excludes Slick Browser filter from not-easily doable style plugins.
  $executable = $view->getExecutable();
  if ($executable && !in_array($executable->getStyle()->getPluginId(), ['blazy', 'slick', 'slick_browser', 'html_list'])) {
    unset($form['options']['name']['#options']['views.slick_browser_switch']);
  }
}

/**
 * Implements hook_form_alter().
 */
function slick_browser_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (!isset($form['#browser_parts'])) {
    return;
  }
  \Drupal::service('slick_browser')->formAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_entity_browser_field_widget_display_info_alter().
 */
function slick_browser_entity_browser_field_widget_display_info_alter(array &$displays) {
  \Drupal::service('slick_browser')->entityBrowserFieldWidgetDisplayInfoAlter($displays);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function slick_browser_field_widget_entity_browser_entity_reference_form_alter(&$element, FormStateInterface $form_state, $context) {
  \Drupal::service('slick_browser')->widgetEntiyBrowserFormAlter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function slick_browser_field_widget_entity_browser_file_form_alter(&$element, FormStateInterface $form_state, $context) {
  \Drupal::service('slick_browser')->widgetEntiyBrowserFormAlter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function slick_browser_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  if ($plugin->getPluginId() == 'entity_browser_file') {
    return \Drupal::service('slick_browser')->widgetThirdPartySettingsForm($plugin, $field_definition, $form_mode, $form, $form_state);
  }
  return [];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function slick_browser_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  $settings = isset($variables['element']['#settings']) ? $variables['element']['#settings'] : [];
  if (empty($settings['_browser'])) {
    return;
  }

  SlickBrowser::addThemeSuggestions($suggestions, $variables, $hook);
}

/**
 * Implements hook_config_schema_info_alter().
 */
function slick_browser_config_schema_info_alter(array &$definitions) {
  Blazy::configSchemaInfoAlter($definitions, 'slick_browser', SlickBrowserDefault::widgetSettings());
}

/**
 * Implements hook_slick_skins_info().
 */
function slick_browser_slick_skins_info() {
  return '\Drupal\slick_browser\SlickBrowserSkin';
}

/**
 * Implements hook_help().
 */
function slick_browser_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.slick_browser':
      return check_markup(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}
